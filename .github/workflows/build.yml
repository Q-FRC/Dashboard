# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  workflow_call:
    inputs:
      build_type:
        description: Type of build (Debug, Release, RelWithDebInfo, MinSizeRel)
        type: string
        default: Debug

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:

          - os: ubuntu-20.04
            qt_host: linux
            qt_version: '6.6.0'
            qt_modules: 'qtmultimedia qtcharts qtwaylandcompositor'

          - os: windows-2022
            qt_host: windows
            qt_version: '6.6.0'
            qt_modules: 'qtmultimedia qtcharts'

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Grab and store version
      shell: bash
      run: |
        tag_name=$(git describe --tags --abbrev=0)
        echo "VERSION=$tag_name" >> $GITHUB_ENV
        echo "BUILD_DIR=${{ github.workspace }}/build" >> $GITHUB_ENV
        echo "INSTALL_DIR=${{ github.workspace }}/install" >> $GITHUB_ENV
        echo "INSTALL_APPIMAGE_DIR=${{ github.workspace }}/install-appdir" >> $GITHUB_ENV
        echo "NTCORE_INSTALL_DIR=${{ github.workspace }}/install-ntcore" >> $GITHUB_ENV
        echo "PROTOBUF_INSTALL_DIR=${{ github.workspace }}/install-protobuf" >> $GITHUB_ENV

    - name: Install CMake
      uses: lukka/get-cmake@v3.28.1

    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'

    - uses: repolevedavaj/install-nsis@v1.0.1
      if: runner.os == 'Windows'
      with:
        nsis-version: 3.08

    - name: Install Qt
      uses: jurplel/install-qt-action@v3.3.0
      with:
        version: 6.6.0
        modules: ${{ matrix.qt_modules }}

    - name: Install Python Dependencies
      run: |
        pip install jinja2

    - name: Prepare AppImage (Linux)
      if: runner.os == 'Linux'
      run: |
        wget "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        wget "https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage"
        wget "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"

    - name: Setup CCache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-${{ inputs.build_type }}

    - name: Configure CMake (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install libstdc++-10-dev gcc-10 ninja-build

        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10

        cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DUSE_SYSTEM_NTCORE=OFF -DUSE_SYSTEM_PROTOBUF=OFF -DBUILD_SHARED_LIBS=OFF

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cmake -S . -B ${{ env.BUILD_DIR }} -G Ninja -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DUSE_SYSTEM_NTCORE=OFF -DUSE_SYSTEM_PROTOBUF=OFF

    - name: Build
      run: |
        cmake --build ${{ env.BUILD_DIR }} --parallel $(nproc) --config ${{ inputs.build_type }}

    - name: Test
      working-directory: ${{ env.BUILD_DIR }}/tests
      shell: bash
      run: |
        export QT_QPA_PLATFORM_PLUGIN=offscreen
        ctest --build-config ${{ inputs.build_type }} --verbose

    - name: Package (Linux)
      if: runner.os == 'Linux'
      run: |
        cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_DIR }}/usr

        cd ${{ env.INSTALL_DIR }}
        tar --owner root --group root -czf ../QFRCDashboard.tar.gz *

    - name: Package AppImage (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get install libxcb-cursor-dev libxcb-cursor0
        mkdir -p ${{ env.INSTALL_APPIMAGE_DIR}}/usr/{lib,bin}

        cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_APPIMAGE_DIR }}/usr

        export OUTPUT="QFRCDashboard-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage"

        chmod +x linuxdeploy-*.AppImage

        mkdir -p ${{ env.INSTALL_APPIMAGE_DIR }}/usr/plugins/iconengines

        cp -r /home/runner/work/QFRCDashboard/Qt/${{ matrix.qt_version }}/gcc_64/plugins/iconengines/* ${{ env.INSTALL_APPIMAGE_DIR }}/usr/plugins/iconengines

        cp /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/
        cp /usr/lib/x86_64-linux-gnu/libssl.so.1.1 ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/

        ./linuxdeploy-x86_64.AppImage --appdir ${{ env.INSTALL_APPIMAGE_DIR }} --output appimage --plugin qt

    - name: Package (Windows, Portable)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cmake --install ${{ env.BUILD_DIR }}\_deps\ntcore-build --prefix ${{ env.NTCORE_INSTALL_DIR }}
        cmake --install ${{ env.BUILD_DIR }}\_deps\protobuf-build --prefix ${{ env.PROTOBUF_INSTALL_DIR }}

        mkdir ${{ env.INSTALL_DIR }}
        set PATH=%PATH%;"${{ runner.workspace }}\Qt\6.6.0\msvc2019_64\bin"

        windeployqt ${{ env.BUILD_DIR }}\QFRCDashboard.exe --dir ${{ env.INSTALL_DIR }}
        cp ${{ env.BUILD_DIR }}\QFRCDashboard.exe ${{ env.INSTALL_DIR }}

        if "${{ inputs.build_type }}" == "Debug" (
          cp C:\Windows\System32\ucrtbased.dll ${{ env.INSTALL_DIR }}
        ) else (
          cp C:\Windows\System32\ucrtbase.dll ${{ env.INSTALL_DIR }}
        )

        cp ${{ env.PROTOBUF_INSTALL_DIR }}\bin\abseil_dll.dll ${{ env.INSTALL_DIR }}

    - name: Package (Windows, Installer)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cd ${{ env.INSTALL_DIR }}
        makensis -NOCD "${{ env.BUILD_DIR }}/program_info/win_install.nsi"

    ##
    # UPLOAD
    ##

    - name: Upload portable tarball (Linux)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: QFRCDashboard-${{ runner.os }}-Binary-${{ env.VERSION }}-${{ inputs.build_type }}
        path: QFRCDashboard.tar.gz

    - name: Upload AppImage (Linux)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: QFRCDashboard-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage
        path: QFRCDashboard-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage

    - name: Upload binary zip (Windows, portable)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: QFRCDashboard-Windows-Portable-${{ env.VERSION }}-${{ inputs.build_type }}
        path: ${{ env.INSTALL_DIR }}/**

    - name: Upload installer (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: QFRCDashboard-${{ runner.os }}-Setup-${{ env.VERSION }}-${{ inputs.build_type }}
        path: QFRCDashboard-Setup.exe

# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  workflow_call:
    inputs:
      build_type:
        description: Type of build (Debug, Release, RelWithDebInfo, MinSizeRel)
        type: string
        default: Debug

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:

          - os: ubuntu-20.04
            qt_host: linux
            qt_version: '6.6.0'
            qt_modules: 'qt6-multimedia-dev qt6-wayland-dev'

    runs-on: ${{ matrix.os }}

    env:
      INSTALL_DIR: "install"
      INSTALL_APPIMAGE_DIR: "install-appdir"
      BUILD_DIR: "build"
      VERSION: "0.9.0"

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: 'Install Qt 6.6.0'
      if: runner.os == 'Linux'
      uses: jurplel/install-qt-action@v3.3.0
      with:
        version: 6.6.0
        modules: qtmultimedia

    - name: 'Checkout wpilib'
      uses: actions/checkout@v4
      with:
        repository: 'wpilibsuite/allwpilib'
        ref: '9b8011aa67e30f150862545758056ff4d0cc0eac' # MAY want 2023
        path: 'allwpilib'

    - name: 'Prepare ntcore'
      run: |
        cd allwpilib
        git apply ../.github/patches/No-Werror.patch
        cd ..

    - name: 'Install Python Dependencies (Linux)'
      if: runner.os == 'Linux'
      run: |
        pip install jinja2

    - name: 'Build ntcore (Linux)'
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install libprotobuf-dev libprotobuf17 libstdc++-10-dev gcc-10 ninja-build
        cmake -B wpilib_build -S "allwpilib" \
          -DCMAKE_INSTALL_PREFIX='/usr' \
          -DUSE_SYSTEM_EIGEN=OFF \
          -DUSE_SYSTEM_FMTLIB=OFF \
          -DWITH_JAVA=OFF \
          -DWITH_CSCORE=OFF \
          -DWITH_NTCORE=ON \
          -DWITH_WPIMATH=OFF \
          -DWITH_WPILIB=OFF \
          -DWITH_TESTS=OFF \
          -DWITH_GUI=OFF \
          -DWITH_SIMULATION_MODULES=OFF \
          -DCMAKE_CXX_COMPILER=/usr/bin/g++-10 \
          -Wno-dev
        cmake --build wpilib_build --parallel $(nproc)
        sudo cmake --install wpilib_build

    - name: Prepare AppImage (Linux)
      if: runner.os == 'Linux'
      run: |
        wget "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        wget "https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage"
        wget "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"

    - name: Configure CMake (Linux)
      if: runner.os == 'Linux'
      run: |
        cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/bin/g++-10

    - name: Build
      run: |
        cmake --build ${{ env.BUILD_DIR }} --parallel $(nproc)

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}

    - name: Package (Linux)
      if: runner.os == 'Linux'
      run: |
        cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_DIR }}

        cd ${{ env.INSTALL_DIR }}
        tar --owner root --group root -czf ../QFRCDashboard.tar.gz *

    - name: Package AppImage (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get install libxcb-cursor-dev libxcb-cursor0
        mkdir -p ${{ env.INSTALL_APPIMAGE_DIR}}/usr/{lib,bin}
        cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_APPIMAGE_DIR }}/usr

        export OUTPUT="QFRCDashboard-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage"

        chmod +x linuxdeploy-*.AppImage

        mkdir -p ${{ env.INSTALL_APPIMAGE_DIR }}/usr/plugins/iconengines

        cp -r /home/runner/work/QFRCDashboard/Qt/${{ matrix.qt_version }}/gcc_64/plugins/iconengines/* ${{ env.INSTALL_APPIMAGE_DIR }}/usr/plugins/iconengines

        cp /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/
        cp /usr/lib/x86_64-linux-gnu/libssl.so.1.1 ${{ env.INSTALL_APPIMAGE_DIR }}//usr/lib/

        ./linuxdeploy-x86_64.AppImage --appdir ${{ env.INSTALL_APPIMAGE_DIR }} --output appimage --plugin qt

    - name: Upload portable tarball (Linux)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: QFRCDashboard-${{ runner.os }}-Binary-${{ env.VERSION }}-${{ inputs.build_type }}
        path: QFRCDashboard.tar.gz

    - name: Upload system dir (Linux)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: QFRCDashboard-${{ runner.os }}-System-${{ env.VERSION }}-${{ inputs.build_type }}
        path: ${{ env.INSTALL_APPIMAGE_DIR }}/**

    - name: Upload AppImage (Linux)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: QFRCDashboard-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage
        path: QFRCDashboard-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage


  build-windows:
    name: "Build - Windows"
    runs-on: windows-2022

    env:
      VERSION: "0.9.0"
      BUILD_WIN_DIR: "winbuild"
      INSTALL_WIN_DIR: "install-win"
      NTCORE_INSTALL_DIR: "install-ntcore"
      PROTOBUF_INSTALL_DIR: "install-protobuf"

    steps:
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install CMake
        uses: lukka/get-cmake@v3.27.6

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: 'Install Qt (Windows)'
        uses: jurplel/install-qt-action@v3.3.0
        with:
          version: 6.6.0
          modules: qtmultimedia

      - name: Install jinja
        run: |
         python -m ensurepip
         python -m pip install jinja2

      - uses: actions/checkout@v3

      - name: 'Checkout protobuf'
        uses: actions/checkout@v4
        with:
          repository: 'protocolbuffers/protobuf'
          # ref: 'v2024.1.1-beta-3' # MAY want 2023
          path: 'protobuf'

      - name: 'Prepare protobuf (Windows)'
        working-directory: protobuf
        run: |
          git submodule update --init --recursive

      - name: 'Configure protobuf CMake (Windows)'
        run: |
         cmake -S protobuf -B win-pb-build -G "Ninja" -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PROTOBUF_DIR }} -Dprotobuf_ALLOW_CCACHE=ON -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_MSVC_STATIC_RUNTIME=OFF -Dprotobuf_BUILD_SHARED_LIBS=ON
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: 'Build protobuf (Windows)'
        working-directory: win-pb-build
        run: |
          cmake --build . --parallel $(nproc)
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: 'Install protobuf (Windows)'
        run: |
          cmake --install win-pb-build --prefix ${{ env.PROTOBUF_INSTALL_DIR }}
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: 'Checkout wpilib'
        uses: actions/checkout@v4
        with:
          repository: 'wpilibsuite/allwpilib'
          ref: '9b8011aa67e30f150862545758056ff4d0cc0eac' # MAY want 2023
          path: 'allwpilib'

      - name: 'Prepare ntcore'
        run: |
          cd allwpilib
          git apply ../.github/patches/No-Werror.patch
          cd ..

      - name: 'Configure ntcore CMake (Windows)'
        run: |
         cmake -S allwpilib -B win-nt-build -DCMAKE_CXX_FLAGS="/FS /EHsc" -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DWITH_JAVA=OFF -DWITH_EXAMPLES=OFF -DUSE_SYSTEM_FMTLIB=OFF -DUSE_SYSTEM_LIBUV=OFF -DUSE_SYSTEM_EIGEN=OFF -DWITH_CSCORE=OFF -DWITH_NTCORE=ON -DWITH_WPIMATH=OFF -DWITH_WPILIB=OFF -DWITH_TESTS=OFF -DWITH_GUI=OFF -DWITH_SIMULATION_MODULES=OFF -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DProtobuf_ROOT=${{ env.PROTOBUF_INSTALL_DIR }} -DCMAKE_POLICY_DEFAULT_CMP0074=NEW
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: 'Build ntcore (Windows)'
        working-directory: win-nt-build
        run: |
          cmake --build . --parallel $(nproc) --config ${{ inputs.build_type }}
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: 'Install ntcore (Windows)'
        run: |
          cmake --install win-nt-build --config ${{ inputs.build_type }} --prefix ${{ env.NTCORE_INSTALL_DIR }}
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: 'Build (Windows)'
        run: |
          cmake -S . -B ${{ env.BUILD_WIN_DIR }} -Dntcore_ROOT=${{ env.NTCORE_INSTALL_DIR }} -DProtobuf_ROOT=${{ env.PROTOBUF_INSTALL_DIR }} -DCMAKE_CXX_FLAGS="/I${{ runner.workspace }}\QFRCDashboard\${{ env.NTCORE_INSTALL_DIR }}\include /MT /FS" -G "Ninja" -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=${{ inputs.build_type }}
          cmake --build ${{ env.BUILD_WIN_DIR }} --config ${{ inputs.build_type }} --parallel $(nproc)
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: Package (Windows)
        shell: cmd
        run: |
          mkdir ${{ env.INSTALL_WIN_DIR }}
          set PATH=%PATH%;"${{ runner.workspace }}\Qt\6.6.0\msvc2019_64\bin"
          windeployqt ${{ env.BUILD_WIN_DIR }}\QFRCDashboard.exe --dir ${{ env.INSTALL_WIN_DIR }}
          if "${{ inputs.build_type }}" == "Debug" (
            cp ${{ env.BUILD_WIN_DIR }}\QFRCDashboard.exe ${{ env.INSTALL_WIN_DIR }}
            cp ${{ env.NTCORE_INSTALL_DIR }}\bin\ntcored.dll ${{ env.INSTALL_WIN_DIR }}
            cp ${{ env.NTCORE_INSTALL_DIR }}\bin\wpinetd.dll ${{ env.INSTALL_WIN_DIR }}
            cp ${{ env.NTCORE_INSTALL_DIR }}\bin\wpiutild.dll ${{ env.INSTALL_WIN_DIR }}
            cp ${{ env.PROTOBUF_INSTALL_DIR }}\bin\libprotobufd.dll ${{ env.INSTALL_WIN_DIR }}
            cp C:\Windows\System32\ucrtbased.dll ${{ env.INSTALL_WIN_DIR }}
          ) else (
            cp ${{ env.BUILD_WIN_DIR }}\QFRCDashboard.exe ${{ env.INSTALL_WIN_DIR }}
            cp ${{ env.NTCORE_INSTALL_DIR }}\bin\ntcore.dll ${{ env.INSTALL_WIN_DIR }}
            cp ${{ env.NTCORE_INSTALL_DIR }}\bin\wpinet.dll ${{ env.INSTALL_WIN_DIR }}
            cp ${{ env.NTCORE_INSTALL_DIR }}\bin\wpiutil.dll ${{ env.INSTALL_WIN_DIR }}
            cp ${{ env.PROTOBUF_INSTALL_DIR }}\bin\libprotobuf.dll ${{ env.INSTALL_WIN_DIR }}
            cp C:\Windows\System32\ucrtbase.dll ${{ env.INSTALL_WIN_DIR }}
          )
          cp ${{ env.PROTOBUF_INSTALL_DIR }}\bin\abseil_dll.dll ${{ env.INSTALL_WIN_DIR }}

      ##
      # UPLOAD BUILDS
      ##

      - name: Upload binary zip (Windows, portable)
        uses: actions/upload-artifact@v3
        with:
          name: QFRCDashboard-Windows-Portable-${{ env.VERSION }}-${{ inputs.build_type }}
          path: ${{ env.INSTALL_WIN_DIR }}/**
